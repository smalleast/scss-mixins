/*margin Start*/

$margin-map:( m:margin, mt:margin-top, mr:margin-right, mb:margin-bottom, ml:margin-left, mx:(margin-left, margin-right), my:(margin-top, margin-bottom));
.mr_->*:last-child {
  margin-right: 0;
}

.ml_->*:first-child {
  margin-left: 0;
}

@mixin generator-margin($inList, $inDirection:'m') {
  $mapValue: map_get($margin-map, $inDirection);
  $typeof: type-of($mapValue);
  @if $typeof=='string' {
    .#{$inDirection} {
      @each $i in $inList {
        &#{$i} {
          &,
          &_>* {
            #{$mapValue}:#{$i}px;
          }
        }
      }
    }
  }
  @else {
    .#{$inDirection} {
      @each $i in $inList {
        &#{$i} {
          &,
          &_>* {
            //mapValue is a `list`
            @each $mapItem in $mapValue {
              #{$mapItem}:#{$i}px;
            }
          }
        }
      }
    }
  }
}

@mixin generator-margin-m($inList) {
  @include generator-margin($inList, 'm');
}

@mixin generator-margin-mt($inList) {
  @include generator-margin($inList, 'mt');
}

@mixin generator-margin-mr($inList) {
  @include generator-margin($inList, 'mr');
}

@mixin generator-margin-mb($inList) {
  @include generator-margin($inList, 'mb');
}

@mixin generator-margin-ml($inList) {
  @include generator-margin($inList, 'ml');
}

@mixin generator-margin-mx($inList) {
  @include generator-margin($inList, 'mx');
}

@mixin generator-margin-my($inList) {
  @include generator-margin($inList, 'my');
}

@mixin generator-margin-all($inList) {
  @include generator-margin-m($inList);
  @include generator-margin-mt($inList);
  @include generator-margin-mr($inList);
  @include generator-margin-mb($inList);
  @include generator-margin-ml($inList);
  @include generator-margin-mx($inList);
  @include generator-margin-my($inList);
}

/*margin End*/