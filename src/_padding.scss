/*padding Start*/

$padding-map: ( p:padding, pt:padding-top, pr:padding-right, pb:padding-bottom, pl:padding-left, px:(padding-left, padding-right), py:(padding-top, padding-bottom));
.pr_->*:last-child {
  padding-right: 0;
}

.pl_->*:first-child {
  padding-left: 0;
}

@mixin generator-padding($inList, $inDirection:'p') {
  $mapValue: map_get($padding-map, $inDirection);
  $typeof: type-of($mapValue);
  @if $typeof=='string' {
    .#{$inDirection} {
      @each $i in $inList {
        &#{$i} {
          &,
          &_>* {
            #{$mapValue}: #{$i}px;
          }
        }
      }
    }
  }
  @else {
    .#{$inDirection} {
      @each $i in $inList {
        &#{$i} {
          &,
          &_>* {
            //mapValue is a `list`
            @each $mapItem in $mapValue {
              #{$mapItem}: #{$i}px;
            }
          }
        }
      }
    }
  }
}

@mixin generator-padding-p($inList) {
  @include generator-padding($inList, 'p');
}

@mixin generator-padding-pt($inList) {
  @include generator-padding($inList, 'pt');
}

@mixin generator-padding-pr($inList) {
  @include generator-padding($inList, 'pr');
}

@mixin generator-padding-pb($inList) {
  @include generator-padding($inList, 'pb');
}

@mixin generator-padding-pl($inList) {
  @include generator-padding($inList, 'pl');
}

@mixin generator-padding-px($inList) {
  @include generator-padding($inList, 'px');
}

@mixin generator-padding-py($inList) {
  @include generator-padding($inList, 'py');
}

@mixin generator-padding-all($inList) {
  @include generator-padding-p($inList);
  @include generator-padding-pt($inList);
  @include generator-padding-pr($inList);
  @include generator-padding-pb($inList);
  @include generator-padding-pl($inList);
  @include generator-padding-px($inList);
  @include generator-padding-py($inList);
}

/*padding End*/